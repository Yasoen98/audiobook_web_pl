generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(uuid())
  email         String      @unique
  passwordHash  String
  role          Role        @default(user)
  createdAt     DateTime    @default(now())
  voiceModels   VoiceModel[]
  pdfFiles      PdfFile[]
  ttsJobs       TtsJob[]
  consents      Consent[]
  auditLogs     AuditLog[]
  refreshTokens RefreshToken[]
}

enum Role {
  user
  admin
}

model RefreshToken {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model VoiceModel {
  id               String   @id @default(uuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  name             String
  lang             String   @default("pl-PL")
  status           VoiceModelStatus @default(preparing)
  trainingLogsURL  String?
  samplesCount     Int      @default(0)
  sampleRate       Int      @default(16000)
  architecture     String   @default("vits")
  watermarkEnabled Boolean  @default(true)
  createdAt        DateTime @default(now())
}

enum VoiceModelStatus {
  preparing
  training
  validating
  ready
  failed
}

model PdfFile {
  id           String       @id @default(uuid())
  user         User         @relation(fields: [userId], references: [id])
  userId       String
  title        String
  originalName String
  storageKey   String
  sizeBytes    Int
  pageCount    Int
  tags         String[]
  hash         String       @unique
  createdAt    DateTime     @default(now())
  segments     PdfSegment[]
}

model PdfSegment {
  id        String   @id @default(uuid())
  pdf       PdfFile  @relation(fields: [pdfId], references: [id])
  pdfId     String
  page      Int
  """Numer porzÄ…dkowy segmentu"""
  order     Int
  text      String
  startChar Int
  endChar   Int
}

model TtsJob {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id])
  userId       String
  pdf          PdfFile   @relation(fields: [pdfId], references: [id])
  pdfId        String
  voiceModel   VoiceModel @relation(fields: [voiceModelId], references: [id])
  voiceModelId String
  type         TtsJobType
  status       TtsJobStatus @default(queued)
  progress     Float        @default(0)
  resultKey    String?
  createdAt    DateTime     @default(now())
}

enum TtsJobType {
  stream
  batch
}

enum TtsJobStatus {
  queued
  processing
  done
  failed
}

model Consent {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  text       String
  acceptedAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  action    String
  targetType String
  targetId  String?
  createdAt DateTime @default(now())
  ip        String?
  userAgent String?
}
